---
# tasks file for OpenNebula cloud post-deployment verification

# Gather min subset of facts for datetime
- setup:
    gather_subset:
    - min

- name: Install ping dependencies
  ansible.builtin.package:
    name:
      - jc
      - jq
    state: present

- name: Populate service facts
  ansible.builtin.service_facts:

# !!! Might be reasonable to discuss alternative approach for this check
- name: Validate xml-rpc API
  ansible.builtin.shell: >
    oneuser list
  register: oneuser_result
  failed_when: "oneuser_result.rc != 0"

- name: Save xml-rpc status
  set_fact:
    verification_result: "{{ (verification_result | default({})) | combine({'XML-RPC API status': 'ok'}) }}"

- name: Check services enabled
  set_fact:
    verification_result: "{{ verification_result | combine({ item.desc + ' is enabled': 'ok'}) }}"
  when: ansible_facts['services'][ item.name ]['status'] | default('not-found') == 'enabled'
  with_items: "{{ validation.core_services.service_list }}"

- name: Check services restart
  ansible.builtin.service:
    name: "{{ item.name }}"
    state: restarted
  register: restarted
  with_items: "{{ validation.core_services.service_list }}"

- name: Check services restarted
  set_fact:
    verification_result: "{{ verification_result | combine({ item.desc + ' restarted': 'ok'}) }}"
  when: ansible_facts['services'][ item.name ]['state'] | default('not-found') == 'running'
  with_items: "{{ validation.core_services.service_list }}"

- name: Check oned version
  ansible.builtin.shell: >
    oned -v  
  register: oned_version

- name: Save oned version
  set_fact:
    verification_result: "{{ verification_result | combine({'Oned version': oned_version.stdout}) }}"

- name: Printout oned version
  debug:
    msg: "Installed oned version: {{ oned_version.stdout }}"

# Modify for Debian and RH-based distros        
- name: Verify OpenNebula private repos on the Debian-based OS
  ansible.builtin.shell: >
    cd /etc/apt/sources.list.d/ && grep -Rn opennebula . | awk '{print $2}'
  register: debian_repos_list
  failed_when: "debian_repos_list.rc != 0"
  when: ansible_os_family == "Debian"

- name: Verify OpenNebula private repos on the RH-based OS
  ansible.builtin.shell: >
    cd /etc/yum.repos.d/ && grep -Rn opennebula . | grep baseurl | awk -F '@' '/1/ {print $2}'
  register: rh_repos_list
  failed_when: "rh_repos_list.rc != 0"
  when: ansible_os_family == "RedHat"

- name: Save OpenNebula Debian repositories
  set_fact:
    verification_result: "{{ verification_result | combine({'Configured OpenNebula repository': debian_repos_list.stdout}) }}"
  when: debian_repos_list is defined and (debian_repos_list.skipped is not defined or not debian_repos_list.skipped)

- name: Save OpenNebula RedHat repositories
  set_fact:
    verification_result: "{{ verification_result | combine({'Configured OpenNebula repository': rh_repos_list.stdout}) }}"
  when: rh_repos_list is defined and (rh_repos_list.skipped is not defined or not rh_repos_list.skipped)

- block:
  - name: Verify OpenNebula scheduler can contact oned
    ansible.builtin.shell: |
      systemctl stop opennebula-scheduler && systemctl start opennebula-scheduler
      sleep 3
      grep 'oned successfully contacted' /var/log/one/sched.log
    register: one_scheduler
    failed_when: "one_scheduler.rc != 0"

  - name: Save OpenNebula scheduler can contact oned
    set_fact:
      verification_result: "{{ verification_result | combine({'OpenNebula scheduler can contact oned': 'ok'}) }}"
  when: one_version is version('6.99', '<')

- name: Verify one-gate listen & port on the server
  ansible.builtin.shell: >
    ss -tlpn | grep $(cat /etc/one/onegate-server.conf | awk '/^:port:/ {print $2}')
  register: onegate_service

- name: Save one-gate listen & port on the server
  set_fact:
    verification_result: "{{ verification_result | combine({'OpenNebula one-gate service listens on the server' : 'ok'}) }}"

- block:
  - name: OneFlow | Verify API port is listening
    ansible.builtin.shell: >
      ss -tlpn | grep -o $(cat /etc/one/oneflow-server.conf | awk '/^:port:/ {print $2}')
    register: oneflow_status
    failed_when: "oneflow_status.rc != 0"
   
  - name: OneFlow | Report API port status
    set_fact:
      verification_result: "{{ verification_result | combine({'Verify one-flow service port is open on the server' : 'ok'}) }}"
  
  - name: OneFlow | Init OneFlow IDs
    set_fact:
      flow_template_id: ""
      flow_service_id: ""
    run_once: true

  - name: OneFlow | Ensure service is running
    become: true
    ansible.builtin.systemd:
      name: opennebula-flow
      state: started
      enabled: true
    delegate_to: "{{ groups[frontend_group | default('frontend')][0] }}"
    run_once: true

  - name: OneFlow | Wait for API port
    ansible.builtin.wait_for:
      host: "{{ hostvars[groups[frontend_group | default('frontend')][0]].ansible_host | default('127.0.0.1') }}"
      port: 2474
      timeout: 60
    delegate_to: "{{ groups[frontend_group | default('frontend')][0] }}"
    run_once: true

  - name: OneFlow | Render temporary service template
    ansible.builtin.copy:
      dest: "/tmp/flow-smoke-tpl.json"
      mode: '0644'
      content: |
        {
          "name": "flow-smoke-svc",
          "deployment": "straight",
          "shutdown_action": "terminate-hard",
          "roles": [
            {
              "name": "app",
              "cardinality": 2,
              "min_vms": 2,
              "vm_template": {{ test_vm_template_id }}
            }
          ]
        }
    delegate_to: "{{ groups[frontend_group | default('frontend')][0] }}"
    run_once: true

  - name: OneFlow | Create service template
    ansible.builtin.shell: oneflow-template create /tmp/flow-smoke-tpl.json
    args: { executable: /bin/bash }
    register: flow_tpl_create
    changed_when: true
    delegate_to: "{{ groups[frontend_group | default('frontend')][0] }}"
    run_once: true

  - name: OneFlow | Parse template ID
    ansible.builtin.shell: |
      echo "{{ flow_tpl_create.stdout | default('') }}" | sed -n 's/.*ID:\s*\([0-9]\+\).*/\1/p' | head -1
    args: { executable: /bin/bash }
    register: flow_template_id_cmd
    changed_when: false
    delegate_to: "{{ groups[frontend_group | default('frontend')][0] }}"
    run_once: true

  - name: OneFlow | Store template ID
    set_fact:
      flow_template_id: "{{ flow_template_id_cmd.stdout | trim }}"
    run_once: true

  - name: OneFlow | Resolve template ID by name (fallback)
    ansible.builtin.shell: |
      oneflow-template list | awk '$2=="flow-smoke-svc"{print $1; exit}'
    register: flow_tpl_id_fallback
    changed_when: false
    when: flow_template_id | length == 0
    delegate_to: "{{ groups[frontend_group | default('frontend')][0] }}"
    run_once: true

  - name: OneFlow | Store template ID (fallback)
    set_fact:
      flow_template_id: "{{ flow_tpl_id_fallback.stdout | trim }}"
    when: flow_template_id | length == 0
    run_once: true

  - name: OneFlow | Instantiate the service
    ansible.builtin.shell: oneflow-template instantiate {{ flow_template_id }}
    args: { executable: /bin/bash }
    register: flow_svc_instantiate
    changed_when: true
    delegate_to: "{{ groups[frontend_group | default('frontend')][0] }}"
    run_once: true

  - name: OneFlow | Parse service ID
    ansible.builtin.shell: |
      echo "{{ flow_svc_instantiate.stdout | default('') }}" | sed -n 's/.*ID:\s*\([0-9]\+\).*/\1/p' | head -1
    args: { executable: /bin/bash }
    register: flow_service_id_cmd
    changed_when: false
    delegate_to: "{{ groups[frontend_group | default('frontend')][0] }}"
    run_once: true

  - name: OneFlow | Store service ID
    set_fact:
      flow_service_id: "{{ flow_service_id_cmd.stdout | trim }}"
    run_once: true

  - name: OneFlow | Wait for service state RUNNING
    ansible.builtin.shell: |
      oneflow show {{ flow_service_id }} | grep 'SERVICE STATE' | awk '{print $4}'
    register: flow_state_chk
    delegate_to: "{{ groups[frontend_group | default('frontend')][0] }}"
    run_once: true
    changed_when: false
    retries: 10 
    delay: 10
    until: flow_state_chk.stdout | trim == 'RUNNING'

  - name: OneFlow | Report smoke summary
    ansible.builtin.debug:
      msg:
        - "Flow template ID = {{ flow_template_id }}"
        - "Service ID = {{ flow_service_id }}"
        - "Service state = RUNNING"
    run_once: true

  - name: OneFlow | Get VM count
    ansible.builtin.shell: |
      oneflow show {{ flow_service_id }} | grep -A5 "ROLE app" | grep CARDINALITY | awk '{print $3}'
    register: flow_vm_count
    changed_when: false
    delegate_to: "{{ groups[frontend_group | default('frontend')][0] }}"
    run_once: true      

  - name: OneFlow | Store smoke test result
    set_fact:
      verification_result: "{{ verification_result | combine({
        'OneFlow smoke test (service/state/vms)': 
          'service=' ~ (flow_service_id | default('N/A')) ~
          ', state=' ~ (flow_state_chk.stdout | default('UNKNOWN')) ~
          ', vms_qty=' ~ (flow_vm_count.stdout | default('0'))
      }) }}"
    run_once: true

  rescue:
    - name: OneFlow | Dump service details (on failure)
      ansible.builtin.shell: oneflow show {{ flow_service_id }} | head -120
      args: { executable: /bin/bash }
      when:
        - flow_service_id is defined
        - (flow_service_id | trim) is match('^[0-9]+$')
      delegate_to: "{{ groups[frontend_group | default('frontend')][0] }}"
      run_once: true

    - name: OneFlow | Fail block (smoke failed)
      ansible.builtin.fail:
        msg: "OneFlow smoke failed (tpl={{ flow_template_id | default('N/A') }}, svc={{ flow_service_id | default('N/A') }})"

  always:
    - name: OneFlow | Cleanup service
      ansible.builtin.shell: oneflow delete {{ flow_service_id }}
      args: { executable: /bin/bash }
      when:
        - flow_service_id is defined
        - (flow_service_id | trim) is match('^[0-9]+$')
      delegate_to: "{{ groups[frontend_group | default('frontend')][0] }}"
      run_once: true

    - name: OneFlow | Cleanup temporary template
      ansible.builtin.shell: oneflow-template delete {{ flow_template_id }}
      args: { executable: /bin/bash }
      when:
        - flow_template_id is defined
        - (flow_template_id | trim) is match('^[0-9]+$')
      delegate_to: "{{ groups[frontend_group | default('frontend')][0] }}"
      run_once: true

    - name: OneFlow | Cleanup VMs
      ansible.builtin.shell: onevm list -l ID --no-header | xargs -r -n1 onevm terminate --hard
      args: { executable: /bin/bash }
      delegate_to: "{{ groups[frontend_group | default('frontend')][0] }}"
      retries: 10 
      delay: 10
      run_once: true
  when: "'opennebula-flow.service' in (validation.core_services.service_list | default([]) | map(attribute='name') | list)"


- block:
  - name: Verify fireedge GUI stops and starts
    ansible.builtin.shell: |
      systemctl stop opennebula-fireedge && systemctl start opennebula-fireedge
      sleep 3
      systemctl status opennebula-fireedge | grep Active | grep -o '(running)'
    register: fireedge_status
    failed_when: "'running' not in fireedge_status.stdout"

  - name: Verify fireedge GUI stops & starts
    set_fact:
      verification_result: "{{ verification_result | combine({'Verify fireedge GUI stops and starts' : 'ok'}) }}"

  - name: Verify fireedge service is configured to start at boot time
    ansible.builtin.shell: >
      systemctl status opennebula-fireedge | grep enabled
    register: fireedge_enabled
    failed_when: "'enabled' not in fireedge_enabled.stdout"

  - name: Verify fireedge GUI enabled
    set_fact:
      verification_result: "{{ verification_result | combine({'Verify fireedge GUI is enabled to start automatically' : 'ok'}) }}"

  - name: Fireedge service listens on the server
    ansible.builtin.shell: >
      ss -tlpn | grep $(cat /etc/one/fireedge-server.conf | awk '/^port:/ {print $2}')
    register: firedge_socket
    failed_when: "firedge_socket.rc != 0"
    retries: 5
    delay: 2
    until: firedge_socket.rc == 0

  - name: Verify fireedge GUI listens on the server
    set_fact:
      verification_result: "{{ verification_result | combine({'Verify fireedge GUI listens port' : 'ok'}) }}"

  - name: Connect to a fireedge server
    ansible.builtin.shell: >
      curl "{{ firedge_socket.stdout.split()[3] }}"
    register: connection_status
    failed_when: "connection_status.rc != 0"

  - name: Verify connection to a fireedge server
    set_fact:
      verification_result: "{{ verification_result | combine({'Verify connection to a fireedge server' : 'ok'}) }}"
  when: validation.core_services.check_fireedge_ui

- name: Get registered hosts
  ansible.builtin.shell: >
    onehost list -j
  register: onehost_list
  failed_when: "onehost_list.rc != 0"

- name: Get hosts list if there is only one host
  ignore_errors: true
  set_fact:
    single_host_list: "{{ onehost_list.stdout | from_json | json_query('HOST_POOL.HOST.{id: ID, hostname: NAME, state: STATE}') }}"
  failed_when: "onehost_list.rc != 0"

- name: Create host list with single host list
  when: single_host_list.hostname is not none
  set_fact:
    hosts_list: [ "{{ single_host_list }}"]

- name: Get hosts list
  when: single_host_list.hostname is none
  set_fact:
    hosts_list: "{{ onehost_list.stdout | from_json | json_query('HOST_POOL.HOST[*].{id: ID, hostname: NAME, state: STATE} || HOST_POOL.HOST.{id: ID, hostname: NAME, state: STATE}') }}"
  failed_when: "onehost_list.rc != 0"

- name: Verify hosts list
  set_fact:
    verification_result: "{{ verification_result | combine({'Status of the registered HV hosts' : hosts_list }) }}"

- name: Set host offline and then set online
  ansible.builtin.shell: |
    onehost disable "{{ item.id }}"
    sleep 1
    onehost enable "{{ item.id }}"
    sleep 1
    onehost show "{{ item.id }}" -j
  register: host_monitoring
  loop: "{{ hosts_list }}" 

- name: Get host status
  debug:
    msg: "{{ host_monitoring }}"

# If we reached here all hosts monitoring is ok. Individual hosts status is in hosts_list variable    
- name: Verify host offline and then set online
  set_fact:
    verification_result: "{{ verification_result | combine({'Put hosts offline and then set online. Hosts status' : 'ok' }) }}"

- name: Get datastores list
  ansible.builtin.shell: >
    onedatastore list -j
  register: datastore_list
  failed_when: "datastore_list.rc != 0"

- name: Verify datastores list
  set_fact:
    verification_result: "{{ verification_result | combine({'Datastores list' : datastore_list.stdout | from_json | json_query('DATASTORE_POOL.DATASTORE[*].NAME')}) }}"

- name: Get DS capacity
  assert:
    that:
      - item['FREE_MB'] | int  >= 0
    quiet: true
    fail_msg: "{{item['NAME'] }} datastore  has no free space ({{ item['FREE_MB'] }}MB is available)"   
  when: "item['NAME'] != 'system'"  
  loop: "{{ datastore_list.stdout | from_json | json_query('DATASTORE_POOL.DATASTORE') }}"

- name: Verify DS capacity
  set_fact:
    verification_result: "{{ verification_result | combine({'Datastore capacity more than 0' : 'ok'}) }}"
  
  # We just checking how many marketplaces are registered, if no marketplaces -> fail
- name: Check marketplace
  ansible.builtin.shell: >
    onemarket list -j
  register: marketplace_list
  failed_when: marketplace_list.stdout | from_json | json_query('MARKETPLACE_POOL.MARKETPLACE') | length == 0

- name: Verify Marketplaces
  set_fact:
    verification_result: "{{ verification_result | combine({'Registered marketplaces' : marketplace_list.stdout | from_json | json_query('MARKETPLACE_POOL.MARKETPLACE[*].NAME')}) }}"

- name: Get marketplace status
  debug:
    msg: "{{ marketplace_list.stdout | from_json | json_query('MARKETPLACE_POOL.MARKETPLACE') | length }}"
