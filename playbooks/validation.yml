---
- hosts: all
  tasks:
    - name: Set playbook variables for Connectivity Matrix
      set_fact:
        _conn_matrix_bridge_name: "{{ validation.conn_matrix.bridge_name | d('br-default') }}"
        _conn_matrix_ping_count: "{{ validation.conn_matrix.ping_count | d(10) }}"
        _conn_matrix_vnet_name: "{{ validation.conn_matrix.vnet_name | d('vnet-default') }}"

    - name: Set playbook variables for test VM
      set_fact:
        _test_vm_name: "{{ validation.test_vm.vm.market_name | d('Alpine Linux 3.21') }}"
        # NOTE: Optional parameters, can be overridden in the inventory file
        # validation.test_vm.vm.template_extra: |
        #    MEMORY=256
      when: validation.run_test_vm | default(true)

    - name: Save the output of the hostname command to the hostname variable
      ansible.builtin.shell: hostname
      register: hostname_cmd

    - name: Set fact with hostname
      set_fact:
        hostname_cmd: "{{ hostname_cmd.stdout }}"

- ansible.builtin.import_playbook: ./prepare-test-vm-template.yml

- hosts: "{{ frontend_group | d('frontend') }}"
  roles:
    - role: test_vm
      when: validation.run_test_vm | default(true)
    - role: storage-benchmark
  tasks:
    # Only execute these steps on a single frontend host
    - when: hostvars[groups[frontend_group | d('frontend')][0]]['ansible_host'] == ansible_host
      block:
        - name: Get list of OpenNebula host to "hostname_cmd" mapping
          shell: onehost list -j
          register: host_list_json
          changed_when: false
          no_log: true

        - name: Extract HOST raw (may be mapping or list)
          set_fact:
            host_raw: "{{ (host_list_json.stdout | from_json).HOST_POOL.HOST | default([]) }}"

        - name: Normalize HOST list (always a list)
          set_fact:
            host_list: "{{ [host_raw] if (host_raw is mapping) else (host_raw | default([])) }}"

        - name: Set fact with host to 'hostname_cmd' mapping
          set_fact:
            host_name_to_hostname_cmd: >-
              {{
                dict(
                  (host_list | map(attribute='NAME'))
                  | zip(
                      host_list
                      | map(attribute='TEMPLATE')
                      | map(attribute='HOSTNAME')
                    )
                )
              }}

- ansible.builtin.import_playbook: ./conn-matrix.yml

# Run network tests on the hypervisor hosts
- hosts: "{{ node_group | d('node') }}"
  roles:
    - role: network-benchmark

- ansible.builtin.import_playbook: ./vm-ha.yml

# Will launch validation framework on the frontends
- hosts: "{{ frontend_group | d('frontend') }}"
  roles:
    - role: validation


# Run FE HA verfification only when variable run_fe_ha is set to true
- hosts: "{{ frontend_group | d('frontend') }}"
  tasks:
    - name: Import fe-ha playbook
      import_playbook:
        name: fe-ha
      when: validation.run_fe_ha == true

- ansible.builtin.import_playbook: ./cleanup-test-vm-template.yml

# Render verification report
- hosts: localhost
  gather_facts: false
  become: false
  vars:
    verification_result: "{{ hostvars[groups[frontend_group | d('frontend')][0]].verification_result | default({'No verification results were found': 'N/A'})}}"
    date: "{{ lookup('pipe', 'date +%Y-%m-%d\\ %H:%M:%S') }}"
    validation_vars: "{{ hostvars[groups[frontend_group | d('frontend')][0]].validation | default({}) }}"
  tasks:
    - name: Get repository version
      ansible.builtin.shell: |
        git describe --tags --exact-match 2>/dev/null || git rev-parse --short HEAD
      args:
        chdir: "{{ playbook_dir }}/.."
      register: repo_version_cmd
      changed_when: false

    - name: Render report
      template:
        src: "appendix-cloud-report.j2"
        dest: /tmp/cloud_verification_report.html
      vars:
        repo_version: "{{ repo_version_cmd.stdout }}"

    - name: Print report location
      ansible.builtin.debug:
        msg: |
          ******************************************************
          Verification report rendered to /tmp/cloud_verification_report.html
          ******************************************************

